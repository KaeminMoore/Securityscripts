import socket
import sys
from datetime import datetime

# -------------------------------
# TOP 1000 TCP PORTS (Nmap-based list)
# Truncated for readability — full list below
# -------------------------------
top_ports = [
    1,3,7,9,13,17,19,20,21,22,23,25,26,37,53,79,80,81,82,83,84,85,88,89,90,99,100,
    106,109,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,464,465,
    500,512,513,514,515,543,544,548,554,587,631,636,646,691,993,995,1025,1026,1027,
    1028,1029,1110,1433,1720,1723,1755,1900,2000,2001,2049,2121,2222,2483,2484,
    3306,3389,3689,3690,4333,4444,5060,5061,5432,5500,5800,5900,6000,6667,7000,
    8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,32768,49152,49153,49154,
    49155,49156,49157
]

# -------------------------------
# Spectra Logic T950-specific ports
# -------------------------------
spectra_ports = [21, 22, 23, 80, 111, 161, 443, 515, 631, 8080, 8443]

# Combine and deduplicate
ports_to_scan = sorted(set(top_ports + spectra_ports))

# -------------------------------
# INPUT TARGET
# -------------------------------
target = sys.argv[1] if len(sys.argv) > 1 else "192.168.1.1"
timeout = 1

# -------------------------------
# SCAN FUNCTION
# -------------------------------
def scan_port(ip, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(timeout)
            result = s.connect_ex((ip, port))
            if result == 0:
                print(f"[+] Port {port}/tcp is OPEN")
    except Exception as e:
        print(f"[-] Error on port {port}: {e}")

# -------------------------------
# MAIN EXECUTION
# -------------------------------
print(f"\n[>] Scanning {len(ports_to_scan)} ports on {target}...")
start_time = datetime.now()

for port in ports_to_scan:
    scan_port(target, port)

end_time = datetime.now()
print(f"\n[✓] Scan complete in {end_time - start_time}")
