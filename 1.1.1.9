modules=(afs ceph cifs exfat ext fat fscache fuse gfs2 nfs_common nfsd smbfs_common)

# gather mounted filesystem types and modprobe config once
mounted_fs=$(findmnt -n -o FSTYPE | sort -u)
modconf=$(modprobe --showconfig 2>/dev/null)

printf "%-14s %-6s %-6s %-8s %s\n" "MODULE" "AVAIL" "LOADED" "MOUNTED" "DISABLED? (modprobe)"
for m in "${modules[@]}"; do
  # avail: modinfo returns 0 if the module is present in /lib/modules
  if modinfo -F filename "$m" >/dev/null 2>&1; then avail="yes"; else avail="no"; fi

  # loaded?
  if lsmod | awk '{print $1}' | grep -wq "^${m}$"; then loaded="yes"; else loaded="no"; fi

  # mounted? best-effort: check if a mounted fstype exactly matches the module name (works for cifs, fuse, exfat, gfs2, ceph, nfs, etc.)
  if printf "%s\n" "$mounted_fs" | grep -wq "^${m}$" || \
     ( [ "$m" = "nfs_common" ] && printf "%s\n" "$mounted_fs" | grep -Eq '^nfs|nfs4$' ) || \
     ( [ "$m" = "nfsd" ] && printf "%s\n" "$mounted_fs" | grep -Eq '^nfsd|nfs' ); then
    mounted="yes"
  else
    mounted="no"
  fi

  # disabled in modprobe? check for blacklist or install <module> /bin/false or /bin/true semantics
  if printf "%s\n" "$modconf" | grep -E -q "^\s*(blacklist|install)\s+${m}\b"; then disabled="yes"; else disabled="no"; fi

  printf "%-14s %-6s %-6s %-8s %s\n" "$m" "$avail" "$loaded" "$mounted" "$disabled"
done






#!/bin/bash

{
   a_output=()
   a_output2=()
   a_modprope_config=()
   a_excluded=()
   a_available_modules=()

   a_ignore=("xfs" "vfat" "ext2" "ext3" "ext4")
   a_cve_exists=("afs" "ceph" "cifs" "exfat" "ext" "fat" "fscache" "fuse" "gfs2" "nfs_common" "nfsd" "smbfs_common")

   f_module_chk() {
      l_out2=""
      grep -Pq -- "\b$l_mod_name\b" <<< "${a_cve_exists[*]}" && l_out2=" <- CVE exists!"
      if ! grep -Pq -- '\bblacklist\s+'"$l_mod_name"'\b' <<< "${a_modprope_config[*]}"; then
         a_output2+=("  - Kernel module: \"$l_mod_name\" is not fully disabled $l_out2")
      elif ! grep -Pq -- '\binstall\s+'"$l_mod_name"'\s+/bin/(false|true)\b' <<< "${a_modprope_config[*]}"; then
         a_output2+=("  - Kernel module: \"$l_mod_name\" is not fully disabled $l_out2")
      fi
      if lsmod | grep "$l_mod_name" &> /dev/null; then
         a_output2+=("  - Kernel module: \"$l_mod_name\" is loaded")
      fi
   }

   while IFS= read -r -d $'\0' l_module_dir; do
      a_available_modules+=("$(basename "$l_module_dir")")
   done < <(find "$(readlink -f /lib/modules/"$(uname -r)"/kernel/fs)" -mindepth 1 -maxdepth 1 -type d ! -empty -print0)

   while IFS= read -r l_exclude; do
      if grep -Pq -- "\b$l_exclude\b" <<< "${a_cve_exists[*]}"; then
         a_output2+=("  - ** WARNING: kernel module: \"$l_exclude\" has a CVE and is currently mounted! **")
      elif grep -Pq -- "\b$l_exclude\b" <<< "${a_available_modules[*]}"; then
         a_output+=("  - Kernel module: \"$l_exclude\" is currently mounted - do NOT unload or disable")
      fi
      ! grep -Pq -- "\b$l_exclude\b" <<< "${a_ignore[*]}" && a_ignore+=("$l_exclude")
   done < <(findmnt -knD | awk '{print $2}' | sort -u)

   while IFS= read -r l_config; do
      a_modprope_config+=("$l_config")
   done < <(modprobe --showconfig | grep -P '^\s*(blacklist|install)')

   for l_mod_name in "${a_available_modules[@]}"; do
      [[ "$l_mod_name" =~ overlay ]] && l_mod_name="${l_mod_name::-2}"
      if grep -Pq -- "\b$l_mod_name\b" <<< "${a_ignore[*]}"; then
         a_excluded+=(" - Kernel module: \"$l_mod_name\"")
      else
         f_module_chk
      fi
   done

   [ "${#a_excluded[@]}" -gt 0 ] && printf '%s\n' "" " -- INFO --" \
      "The following intentionally skipped" \
      "${a_excluded[@]}"

   if [ "${#a_output2[@]}" -le 0 ]; then
      printf '%s\n' "" "  - No unused filesystem kernel modules are enabled" "${a_output[@]}" ""
   else
      printf '%s\n' "" "-- Audit Result: --" "  ** REVIEW the following **" "${a_output2[@]}"
      [ "${#a_output[@]}" -gt 0 ] && printf '%s\n' "" "-- Correctly set: --" "${a_output[@]}" ""
   fi
}
